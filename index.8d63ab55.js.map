{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["class $a5fd07fa01589658$export$985739bfa5723e08 {\n    constructor(initialState = null){\n        this.size = 4;\n        this.board = initialState || this.createEmptyBoard();\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    createEmptyBoard() {\n        return Array(this.size).fill().map(()=>Array(this.size).fill(0));\n    }\n    getState() {\n        return this.board.map((row)=>[\n                ...row\n            ]);\n    }\n    getScore() {\n        return this.score;\n    }\n    getStatus() {\n        return this.status;\n    }\n    addRandomTile() {\n        const emptyCells = [];\n        for(let i = 0; i < this.size; i++){\n            for(let j = 0; j < this.size; j++)if (this.board[i][j] === 0) emptyCells.push([\n                i,\n                j\n            ]);\n        }\n        if (emptyCells.length > 0) {\n            const [i, j] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            this.board[i][j] = Math.random() < 0.9 ? 2 : 4;\n            return [\n                i,\n                j\n            ];\n        }\n        return null;\n    }\n    start() {\n        if (this.status === \"idle\") {\n            this.addRandomTile();\n            this.addRandomTile();\n            this.status = \"playing\";\n        }\n    }\n    restart() {\n        this.board = this.createEmptyBoard();\n        this.score = 0;\n        this.status = \"idle\";\n        this.start();\n    }\n    merge(row) {\n        const newRow = row.filter((val)=>val !== 0);\n        const mergedPositions = [];\n        for(let i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n            newRow[i] *= 2;\n            this.score += newRow[i];\n            mergedPositions.push(i);\n            newRow.splice(i + 1, 1);\n            i++;\n        }\n        return [\n            [\n                ...newRow,\n                ...Array(this.size - newRow.length).fill(0)\n            ],\n            mergedPositions\n        ];\n    }\n    moveLeft() {\n        let moved = false;\n        const mergedTiles = [];\n        for(let i = 0; i < this.size; i++){\n            const [newRow, mergedPositions] = this.merge(this.board[i]);\n            if (!newRow.every((val, idx)=>val === this.board[i][idx])) {\n                moved = true;\n                mergedPositions.forEach((pos)=>mergedTiles.push([\n                        i,\n                        pos\n                    ]));\n            }\n            this.board[i] = newRow;\n        }\n        return this.finishMove(moved, mergedTiles);\n    }\n    moveRight() {\n        let moved = false;\n        const mergedTiles = [];\n        for(let i = 0; i < this.size; i++){\n            const reversed = this.board[i].slice().reverse();\n            const [newRow, mergedPositions] = this.merge(reversed);\n            const finalRow = newRow.reverse();\n            if (!finalRow.every((val, idx)=>val === this.board[i][idx])) {\n                moved = true;\n                mergedPositions.forEach((pos)=>{\n                    mergedTiles.push([\n                        i,\n                        this.size - 1 - pos\n                    ]);\n                });\n            }\n            this.board[i] = finalRow;\n        }\n        return this.finishMove(moved, mergedTiles);\n    }\n    moveUp() {\n        let moved = false;\n        const mergedTiles = [];\n        for(let j = 0; j < this.size; j++){\n            const column = this.board.map((row)=>row[j]);\n            const [newColumn, mergedPositions] = this.merge(column);\n            if (!newColumn.every((val, idx)=>val === column[idx])) {\n                moved = true;\n                mergedPositions.forEach((pos)=>mergedTiles.push([\n                        pos,\n                        j\n                    ]));\n            }\n            for(let i = 0; i < this.size; i++)this.board[i][j] = newColumn[i];\n        }\n        return this.finishMove(moved, mergedTiles);\n    }\n    moveDown() {\n        let moved = false;\n        const mergedTiles = [];\n        for(let j = 0; j < this.size; j++){\n            const column = this.board.map((row)=>row[j]).reverse();\n            const [newColumn, mergedPositions] = this.merge(column);\n            const finalColumn = newColumn.reverse();\n            if (!finalColumn.every((val, idx)=>val === column[idx])) {\n                moved = true;\n                mergedPositions.forEach((pos)=>{\n                    mergedTiles.push([\n                        this.size - 1 - pos,\n                        j\n                    ]);\n                });\n            }\n            for(let i = 0; i < this.size; i++)this.board[i][j] = finalColumn[i];\n        }\n        return this.finishMove(moved, mergedTiles);\n    }\n    finishMove(moved, mergedTiles) {\n        let newTile = null;\n        if (moved) {\n            newTile = this.addRandomTile();\n            if (this.board.some((row)=>row.includes(2048))) this.status = \"won\";\n            else if (!this.canMove()) this.status = \"lost\";\n            return [\n                true,\n                mergedTiles,\n                newTile\n            ];\n        }\n        return [\n            false,\n            [],\n            null\n        ];\n    }\n    canMove() {\n        for(let i = 0; i < this.size; i++)for(let j = 0; j < this.size; j++){\n            if (this.board[i][j] === 0) return true;\n            if (j < this.size - 1 && this.board[i][j] === this.board[i][j + 1]) return true;\n            if (i < this.size - 1 && this.board[i][j] === this.board[i + 1][j]) return true;\n        }\n        return false;\n    }\n}\n\n\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const game = new (0, $a5fd07fa01589658$export$985739bfa5723e08)();\n    const cells = Array.from(document.querySelectorAll(\".field-cell\"));\n    const scoreElement = document.querySelector(\".game-score\");\n    const startButton = document.querySelector(\".button\");\n    const messageStart = document.querySelector(\".message-start\");\n    const messageWin = document.querySelector(\".message-win\");\n    const messageLose = document.querySelector(\".message-lose\");\n    function updateUI(movedTiles = [], newTile = null) {\n        const state = game.getState();\n        cells.forEach((cell, index)=>{\n            const row = Math.floor(index / 4); // Здесь мы предполагаем 4 столбца\n            const col = index % 4; // Здесь мы предполагаем 4 столбца\n            const value = state[row][col];\n            const prevValue = cell.textContent ? parseInt(cell.textContent) : 0;\n            cell.textContent = value || \"\";\n            cell.className = `field-cell${value ? ` field-cell--${value}` : \"\"}`;\n            // Анимация слияния\n            const wasMerged = movedTiles.some(([r, c])=>r === row && c === col);\n            if (wasMerged) {\n                cell.style.animation = \"merge-animation 0.3s ease\";\n                setTimeout(()=>{\n                    cell.style.animation = \"\";\n                }, 300);\n            }\n            // Анимация появления новой плитки\n            if (newTile && row === newTile[0] && col === newTile[1] && value !== prevValue) {\n                cell.style.animation = \"appear-animation 0.3s ease\";\n                setTimeout(()=>{\n                    cell.style.animation = \"\";\n                }, 300);\n            }\n        });\n        scoreElement.textContent = game.getScore();\n        messageStart.classList.toggle(\"hidden\", game.getStatus() !== \"idle\");\n        messageWin.classList.toggle(\"hidden\", game.getStatus() !== \"won\");\n        messageLose.classList.toggle(\"hidden\", game.getStatus() !== \"lost\");\n        startButton.classList.toggle(\"start\", game.getStatus() === \"idle\");\n        startButton.classList.toggle(\"restart\", game.getStatus() !== \"idle\");\n        startButton.textContent = game.getStatus() === \"idle\" ? \"Start\" : \"Restart\";\n    }\n    startButton.addEventListener(\"click\", ()=>{\n        if (game.getStatus() === \"idle\") game.start();\n        else game.restart();\n        updateUI();\n    });\n    document.addEventListener(\"keydown\", (e)=>{\n        if (game.getStatus() !== \"playing\") return;\n        let moved = false;\n        let mergedTiles = [];\n        let newTile = null;\n        switch(e.key){\n            case \"ArrowLeft\":\n                [moved, mergedTiles, newTile] = game.moveLeft();\n                break;\n            case \"ArrowRight\":\n                [moved, mergedTiles, newTile] = game.moveRight();\n                break;\n            case \"ArrowUp\":\n                [moved, mergedTiles, newTile] = game.moveUp();\n                break;\n            case \"ArrowDown\":\n                [moved, mergedTiles, newTile] = game.moveDown();\n                break;\n        }\n        if (moved) updateUI(mergedTiles, newTile);\n    });\n    updateUI();\n});\n\n\n//# sourceMappingURL=index.8d63ab55.js.map\n","import { Game } from '../modules/Game.class.js';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const game = new Game();\n  const cells = Array.from(document.querySelectorAll('.field-cell'));\n  const scoreElement = document.querySelector('.game-score');\n  const startButton = document.querySelector('.button');\n  const messageStart = document.querySelector('.message-start');\n  const messageWin = document.querySelector('.message-win');\n  const messageLose = document.querySelector('.message-lose');\n\n  function updateUI(movedTiles = [], newTile = null) {\n    const state = game.getState();\n\n    cells.forEach((cell, index) => {\n      const row = Math.floor(index / 4); // Здесь мы предполагаем 4 столбца\n      const col = index % 4; // Здесь мы предполагаем 4 столбца\n      const value = state[row][col];\n      const prevValue = cell.textContent ? parseInt(cell.textContent) : 0;\n\n      cell.textContent = value || '';\n      cell.className = `field-cell${value ? ` field-cell--${value}` : ''}`;\n\n      // Анимация слияния\n      const wasMerged = movedTiles.some(([r, c]) => r === row && c === col);\n\n      if (wasMerged) {\n        cell.style.animation = 'merge-animation 0.3s ease';\n\n        setTimeout(() => {\n          cell.style.animation = '';\n        }, 300);\n      }\n\n      // Анимация появления новой плитки\n      if (\n        newTile &&\n        row === newTile[0] &&\n        col === newTile[1] &&\n        value !== prevValue\n      ) {\n        cell.style.animation = 'appear-animation 0.3s ease';\n\n        setTimeout(() => {\n          cell.style.animation = '';\n        }, 300);\n      }\n    });\n\n    scoreElement.textContent = game.getScore();\n    messageStart.classList.toggle('hidden', game.getStatus() !== 'idle');\n    messageWin.classList.toggle('hidden', game.getStatus() !== 'won');\n    messageLose.classList.toggle('hidden', game.getStatus() !== 'lost');\n    startButton.classList.toggle('start', game.getStatus() === 'idle');\n    startButton.classList.toggle('restart', game.getStatus() !== 'idle');\n    startButton.textContent = game.getStatus() === 'idle' ? 'Start' : 'Restart';\n  }\n\n  startButton.addEventListener('click', () => {\n    if (game.getStatus() === 'idle') {\n      game.start();\n    } else {\n      game.restart();\n    }\n    updateUI();\n  });\n\n  document.addEventListener('keydown', (e) => {\n    if (game.getStatus() !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n    let mergedTiles = [];\n    let newTile = null;\n\n    switch (e.key) {\n      case 'ArrowLeft':\n        [moved, mergedTiles, newTile] = game.moveLeft();\n        break;\n      case 'ArrowRight':\n        [moved, mergedTiles, newTile] = game.moveRight();\n        break;\n      case 'ArrowUp':\n        [moved, mergedTiles, newTile] = game.moveUp();\n        break;\n      case 'ArrowDown':\n        [moved, mergedTiles, newTile] = game.moveDown();\n        break;\n    }\n\n    if (moved) {\n      updateUI(mergedTiles, newTile);\n    }\n  });\n\n  updateUI();\n});\n","export class Game {\n  constructor(initialState = null) {\n    this.size = 4;\n    this.board = initialState || this.createEmptyBoard();\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  createEmptyBoard() {\n    return Array(this.size)\n      .fill()\n      .map(() => Array(this.size).fill(0));\n  }\n\n  getState() {\n    return this.board.map((row) => [...row]);\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        if (this.board[i][j] === 0) {\n          emptyCells.push([i, j]);\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const [i, j] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[i][j] = Math.random() < 0.9 ? 2 : 4;\n\n      return [i, j];\n    }\n\n    return null;\n  }\n\n  start() {\n    if (this.status === 'idle') {\n      this.addRandomTile();\n      this.addRandomTile();\n      this.status = 'playing';\n    }\n  }\n\n  restart() {\n    this.board = this.createEmptyBoard();\n    this.score = 0;\n    this.status = 'idle';\n    this.start();\n  }\n\n  merge(row) {\n    const newRow = row.filter((val) => val !== 0);\n    const mergedPositions = [];\n\n    for (let i = 0; i < newRow.length - 1; i++) {\n      if (newRow[i] === newRow[i + 1]) {\n        newRow[i] *= 2;\n        this.score += newRow[i];\n        mergedPositions.push(i);\n        newRow.splice(i + 1, 1);\n        i++;\n      }\n    }\n\n    return [\n      [...newRow, ...Array(this.size - newRow.length).fill(0)],\n      mergedPositions,\n    ];\n  }\n\n  moveLeft() {\n    let moved = false;\n    const mergedTiles = [];\n\n    for (let i = 0; i < this.size; i++) {\n      const [newRow, mergedPositions] = this.merge(this.board[i]);\n\n      if (!newRow.every((val, idx) => val === this.board[i][idx])) {\n        moved = true;\n        mergedPositions.forEach((pos) => mergedTiles.push([i, pos]));\n      }\n      this.board[i] = newRow;\n    }\n\n    return this.finishMove(moved, mergedTiles);\n  }\n\n  moveRight() {\n    let moved = false;\n    const mergedTiles = [];\n\n    for (let i = 0; i < this.size; i++) {\n      const reversed = this.board[i].slice().reverse();\n      const [newRow, mergedPositions] = this.merge(reversed);\n      const finalRow = newRow.reverse();\n\n      if (!finalRow.every((val, idx) => val === this.board[i][idx])) {\n        moved = true;\n\n        mergedPositions.forEach((pos) => {\n          mergedTiles.push([i, this.size - 1 - pos]);\n        });\n      }\n      this.board[i] = finalRow;\n    }\n\n    return this.finishMove(moved, mergedTiles);\n  }\n\n  moveUp() {\n    let moved = false;\n    const mergedTiles = [];\n\n    for (let j = 0; j < this.size; j++) {\n      const column = this.board.map((row) => row[j]);\n      const [newColumn, mergedPositions] = this.merge(column);\n\n      if (!newColumn.every((val, idx) => val === column[idx])) {\n        moved = true;\n        mergedPositions.forEach((pos) => mergedTiles.push([pos, j]));\n      }\n\n      for (let i = 0; i < this.size; i++) {\n        this.board[i][j] = newColumn[i];\n      }\n    }\n\n    return this.finishMove(moved, mergedTiles);\n  }\n\n  moveDown() {\n    let moved = false;\n    const mergedTiles = [];\n\n    for (let j = 0; j < this.size; j++) {\n      const column = this.board.map((row) => row[j]).reverse();\n      const [newColumn, mergedPositions] = this.merge(column);\n      const finalColumn = newColumn.reverse();\n\n      if (!finalColumn.every((val, idx) => val === column[idx])) {\n        moved = true;\n\n        mergedPositions.forEach((pos) => {\n          mergedTiles.push([this.size - 1 - pos, j]);\n        });\n      }\n\n      for (let i = 0; i < this.size; i++) {\n        this.board[i][j] = finalColumn[i];\n      }\n    }\n\n    return this.finishMove(moved, mergedTiles);\n  }\n\n  finishMove(moved, mergedTiles) {\n    let newTile = null;\n\n    if (moved) {\n      newTile = this.addRandomTile();\n\n      if (this.board.some((row) => row.includes(2048))) {\n        this.status = 'won';\n      } else if (!this.canMove()) {\n        this.status = 'lost';\n      }\n\n      return [true, mergedTiles, newTile];\n    }\n\n    return [false, [], null];\n  }\n\n  canMove() {\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        if (this.board[i][j] === 0) {\n          return true;\n        }\n\n        if (j < this.size - 1 && this.board[i][j] === this.board[i][j + 1]) {\n          return true;\n        }\n\n        if (i < this.size - 1 && this.board[i][j] === this.board[i + 1][j]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n"],"names":["$a5fd07fa01589658$export$985739bfa5723e08","constructor","initialState","size","board","createEmptyBoard","score","status","Array","fill","map","getState","row","getScore","getStatus","addRandomTile","emptyCells","i","j","push","length","Math","floor","random","start","restart","merge","newRow","filter","val","mergedPositions","splice","moveLeft","moved","mergedTiles","every","idx","forEach","pos","finishMove","moveRight","reversed","slice","reverse","finalRow","moveUp","column","newColumn","moveDown","finalColumn","newTile","some","includes","canMove","document","addEventListener","game","cells","from","querySelectorAll","scoreElement","querySelector","startButton","messageStart","messageWin","messageLose","updateUI","movedTiles","state","cell","index","col","value","prevValue","textContent","parseInt","className","r","c","style","animation","setTimeout","classList","toggle","e","key"],"version":3,"file":"index.8d63ab55.js.map"}