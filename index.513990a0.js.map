{"mappings":"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","sources":["<anon>","src/scripts/main.js","node_modules/@swc/helpers/esm/_sliced_to_array.js","node_modules/@swc/helpers/esm/_array_with_holes.js","node_modules/@swc/helpers/esm/_iterable_to_array_limit.js","node_modules/@swc/helpers/esm/_non_iterable_rest.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js"],"sourcesContent":["(function () {\nfunction $09cbfe85151ea6c6$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return arr;\n}\n\n\nfunction $8ca2848f896a6803$export$71511d61b312f219(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\n\n\nfunction $a0bc1859061deae1$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\nfunction $c3b10a83b523f372$export$71511d61b312f219(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $d4f69c5c6c4654b1$export$71511d61b312f219(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n}\n\n\nfunction $efec029548ccee7f$export$71511d61b312f219(arr, i) {\n    return (0, $09cbfe85151ea6c6$export$71511d61b312f219)(arr) || (0, $8ca2848f896a6803$export$71511d61b312f219)(arr, i) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr, i) || (0, $a0bc1859061deae1$export$71511d61b312f219)();\n}\n\n\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\n\n\nfunction $c50969dc1df61e8b$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$71511d61b312f219(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $227c6742e0ff6f82$export$71511d61b312f219(arr) {\n    return (0, $c50969dc1df61e8b$export$71511d61b312f219)(arr) || (0, $09c9f293d010c0e1$export$71511d61b312f219)(arr) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr) || (0, $38c2d4931cb7a7c4$export$71511d61b312f219)();\n}\n\n\nvar $3d28d7f1aac198f5$export$985739bfa5723e08 = /*#__PURE__*/ function() {\n    \"use strict\";\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.size = 4;\n        this.board = initialState || this.createEmptyBoard();\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"createEmptyBoard\",\n            value: function createEmptyBoard() {\n                var _this = this;\n                return Array(this.size).fill().map(function() {\n                    return Array(_this.size).fill(0);\n                });\n            }\n        },\n        {\n            key: \"getState\",\n            value: function getState() {\n                return this.board.map(function(row) {\n                    return (0, $227c6742e0ff6f82$export$71511d61b312f219)(row);\n                });\n            }\n        },\n        {\n            key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            key: \"addRandomTile\",\n            value: function addRandomTile() {\n                var emptyCells = [];\n                for(var i = 0; i < this.size; i++){\n                    for(var j = 0; j < this.size; j++)if (this.board[i][j] === 0) emptyCells.push([\n                        i,\n                        j\n                    ]);\n                }\n                if (emptyCells.length > 0) {\n                    var _emptyCells_Math_floor = (0, $efec029548ccee7f$export$71511d61b312f219)(emptyCells[Math.floor(Math.random() * emptyCells.length)], 2), i1 = _emptyCells_Math_floor[0], j1 = _emptyCells_Math_floor[1];\n                    this.board[i1][j1] = Math.random() < 0.9 ? 2 : 4;\n                    return [\n                        i1,\n                        j1\n                    ];\n                }\n                return null;\n            }\n        },\n        {\n            key: \"start\",\n            value: function start() {\n                if (this.status === \"idle\") {\n                    this.addRandomTile();\n                    this.addRandomTile();\n                    this.status = \"playing\";\n                }\n            }\n        },\n        {\n            key: \"restart\",\n            value: function restart() {\n                this.board = this.createEmptyBoard();\n                this.score = 0;\n                this.status = \"idle\";\n                this.start();\n            }\n        },\n        {\n            key: \"merge\",\n            value: function merge(row) {\n                var newRow = row.filter(function(val) {\n                    return val !== 0;\n                });\n                var mergedPositions = [];\n                for(var i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                    newRow[i] *= 2;\n                    this.score += newRow[i];\n                    mergedPositions.push(i);\n                    newRow.splice(i + 1, 1);\n                    i++;\n                }\n                return [\n                    (0, $227c6742e0ff6f82$export$71511d61b312f219)(newRow).concat((0, $227c6742e0ff6f82$export$71511d61b312f219)(Array(this.size - newRow.length).fill(0))),\n                    mergedPositions\n                ];\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this, _loop = function(i) {\n                    var _this_merge = (0, $efec029548ccee7f$export$71511d61b312f219)(_this.merge(_this.board[i]), 2), newRow = _this_merge[0], mergedPositions = _this_merge[1];\n                    if (!newRow.every(function(val, idx) {\n                        return val === _this1.board[i][idx];\n                    })) {\n                        moved = true;\n                        mergedPositions.forEach(function(pos) {\n                            return mergedTiles.push([\n                                i,\n                                pos\n                            ]);\n                        });\n                    }\n                    _this.board[i] = newRow;\n                };\n                var _this1 = this;\n                var moved = false;\n                var mergedTiles = [];\n                for(var i = 0; i < this.size; i++)_loop(i);\n                return this.finishMove(moved, mergedTiles);\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this, _loop = function(i) {\n                    var reversed = _this.board[i].slice().reverse();\n                    var _this_merge = (0, $efec029548ccee7f$export$71511d61b312f219)(_this.merge(reversed), 2), newRow = _this_merge[0], mergedPositions = _this_merge[1];\n                    var finalRow = newRow.reverse();\n                    if (!finalRow.every(function(val, idx) {\n                        return val === _this1.board[i][idx];\n                    })) {\n                        moved = true;\n                        mergedPositions.forEach(function(pos) {\n                            mergedTiles.push([\n                                i,\n                                _this1.size - 1 - pos\n                            ]);\n                        });\n                    }\n                    _this.board[i] = finalRow;\n                };\n                var _this1 = this;\n                var moved = false;\n                var mergedTiles = [];\n                for(var i = 0; i < this.size; i++)_loop(i);\n                return this.finishMove(moved, mergedTiles);\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var _this = this, _loop = function(j) {\n                    var column = _this.board.map(function(row) {\n                        return row[j];\n                    });\n                    var _this_merge = (0, $efec029548ccee7f$export$71511d61b312f219)(_this.merge(column), 2), newColumn = _this_merge[0], mergedPositions = _this_merge[1];\n                    if (!newColumn.every(function(val, idx) {\n                        return val === column[idx];\n                    })) {\n                        moved = true;\n                        mergedPositions.forEach(function(pos) {\n                            return mergedTiles.push([\n                                pos,\n                                j\n                            ]);\n                        });\n                    }\n                    for(var i = 0; i < _this.size; i++)_this.board[i][j] = newColumn[i];\n                };\n                var moved = false;\n                var mergedTiles = [];\n                for(var j = 0; j < this.size; j++)_loop(j);\n                return this.finishMove(moved, mergedTiles);\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var _this = this, _loop = function(j) {\n                    var column = _this.board.map(function(row) {\n                        return row[j];\n                    }).reverse();\n                    var _this_merge = (0, $efec029548ccee7f$export$71511d61b312f219)(_this.merge(column), 2), newColumn = _this_merge[0], mergedPositions = _this_merge[1];\n                    var finalColumn = newColumn.reverse();\n                    if (!finalColumn.every(function(val, idx) {\n                        return val === column[idx];\n                    })) {\n                        moved = true;\n                        mergedPositions.forEach(function(pos) {\n                            mergedTiles.push([\n                                _this1.size - 1 - pos,\n                                j\n                            ]);\n                        });\n                    }\n                    for(var i = 0; i < _this.size; i++)_this.board[i][j] = finalColumn[i];\n                };\n                var _this1 = this;\n                var moved = false;\n                var mergedTiles = [];\n                for(var j = 0; j < this.size; j++)_loop(j);\n                return this.finishMove(moved, mergedTiles);\n            }\n        },\n        {\n            key: \"finishMove\",\n            value: function finishMove(moved, mergedTiles) {\n                var newTile = null;\n                if (moved) {\n                    newTile = this.addRandomTile();\n                    if (this.board.some(function(row) {\n                        return row.includes(2048);\n                    })) this.status = \"won\";\n                    else if (!this.canMove()) this.status = \"lost\";\n                    return [\n                        true,\n                        mergedTiles,\n                        newTile\n                    ];\n                }\n                return [\n                    false,\n                    [],\n                    null\n                ];\n            }\n        },\n        {\n            key: \"canMove\",\n            value: function canMove() {\n                for(var i = 0; i < this.size; i++)for(var j = 0; j < this.size; j++){\n                    if (this.board[i][j] === 0) return true;\n                    if (j < this.size - 1 && this.board[i][j] === this.board[i][j + 1]) return true;\n                    if (i < this.size - 1 && this.board[i][j] === this.board[i + 1][j]) return true;\n                }\n                return false;\n            }\n        }\n    ]);\n    return Game;\n}();\n\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    var updateUI = function updateUI() {\n        var movedTiles = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [], newTile = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;\n        var state = game.getState();\n        cells.forEach(function(cell, index) {\n            var row = Math.floor(index / 4); // Здесь мы предполагаем 4 столбца\n            var col = index % 4; // Здесь мы предполагаем 4 столбца\n            var value = state[row][col];\n            var prevValue = cell.textContent ? parseInt(cell.textContent) : 0;\n            cell.textContent = value || \"\";\n            cell.className = \"field-cell\".concat(value ? \" field-cell--\".concat(value) : \"\");\n            // Анимация слияния\n            var wasMerged = movedTiles.some(function(param) {\n                var _param = (0, $efec029548ccee7f$export$71511d61b312f219)(param, 2), r = _param[0], c = _param[1];\n                return r === row && c === col;\n            });\n            if (wasMerged) {\n                cell.style.animation = \"merge-animation 0.3s ease\";\n                setTimeout(function() {\n                    cell.style.animation = \"\";\n                }, 300);\n            }\n            // Анимация появления новой плитки\n            if (newTile && row === newTile[0] && col === newTile[1] && value !== prevValue) {\n                cell.style.animation = \"appear-animation 0.3s ease\";\n                setTimeout(function() {\n                    cell.style.animation = \"\";\n                }, 300);\n            }\n        });\n        scoreElement.textContent = game.getScore();\n        messageStart.classList.toggle(\"hidden\", game.getStatus() !== \"idle\");\n        messageWin.classList.toggle(\"hidden\", game.getStatus() !== \"won\");\n        messageLose.classList.toggle(\"hidden\", game.getStatus() !== \"lost\");\n        startButton.classList.toggle(\"start\", game.getStatus() === \"idle\");\n        startButton.classList.toggle(\"restart\", game.getStatus() !== \"idle\");\n        startButton.textContent = game.getStatus() === \"idle\" ? \"Start\" : \"Restart\";\n    };\n    var game = new (0, $3d28d7f1aac198f5$export$985739bfa5723e08)();\n    var cells = Array.from(document.querySelectorAll(\".field-cell\"));\n    var scoreElement = document.querySelector(\".game-score\");\n    var startButton = document.querySelector(\".button\");\n    var messageStart = document.querySelector(\".message-start\");\n    var messageWin = document.querySelector(\".message-win\");\n    var messageLose = document.querySelector(\".message-lose\");\n    startButton.addEventListener(\"click\", function() {\n        if (game.getStatus() === \"idle\") game.start();\n        else game.restart();\n        updateUI();\n    });\n    document.addEventListener(\"keydown\", function(e) {\n        if (game.getStatus() !== \"playing\") return;\n        var moved = false;\n        var mergedTiles = [];\n        var newTile = null;\n        switch(e.key){\n            case \"ArrowLeft\":\n                var ref;\n                ref = (0, $efec029548ccee7f$export$71511d61b312f219)(game.moveLeft(), 3), moved = ref[0], mergedTiles = ref[1], newTile = ref[2], ref;\n                break;\n            case \"ArrowRight\":\n                var ref1;\n                ref1 = (0, $efec029548ccee7f$export$71511d61b312f219)(game.moveRight(), 3), moved = ref1[0], mergedTiles = ref1[1], newTile = ref1[2], ref1;\n                break;\n            case \"ArrowUp\":\n                var ref2;\n                ref2 = (0, $efec029548ccee7f$export$71511d61b312f219)(game.moveUp(), 3), moved = ref2[0], mergedTiles = ref2[1], newTile = ref2[2], ref2;\n                break;\n            case \"ArrowDown\":\n                var ref3;\n                ref3 = (0, $efec029548ccee7f$export$71511d61b312f219)(game.moveDown(), 3), moved = ref3[0], mergedTiles = ref3[1], newTile = ref3[2], ref3;\n                break;\n        }\n        if (moved) updateUI(mergedTiles, newTile);\n    });\n    updateUI();\n});\n\n})();\n//# sourceMappingURL=index.513990a0.js.map\n","import { Game } from '../modules/Game.class.js';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const game = new Game();\n  const cells = Array.from(document.querySelectorAll('.field-cell'));\n  const scoreElement = document.querySelector('.game-score');\n  const startButton = document.querySelector('.button');\n  const messageStart = document.querySelector('.message-start');\n  const messageWin = document.querySelector('.message-win');\n  const messageLose = document.querySelector('.message-lose');\n\n  function updateUI(movedTiles = [], newTile = null) {\n    const state = game.getState();\n\n    cells.forEach((cell, index) => {\n      const row = Math.floor(index / 4); // Здесь мы предполагаем 4 столбца\n      const col = index % 4; // Здесь мы предполагаем 4 столбца\n      const value = state[row][col];\n      const prevValue = cell.textContent ? parseInt(cell.textContent) : 0;\n\n      cell.textContent = value || '';\n      cell.className = `field-cell${value ? ` field-cell--${value}` : ''}`;\n\n      // Анимация слияния\n      const wasMerged = movedTiles.some(([r, c]) => r === row && c === col);\n\n      if (wasMerged) {\n        cell.style.animation = 'merge-animation 0.3s ease';\n\n        setTimeout(() => {\n          cell.style.animation = '';\n        }, 300);\n      }\n\n      // Анимация появления новой плитки\n      if (\n        newTile &&\n        row === newTile[0] &&\n        col === newTile[1] &&\n        value !== prevValue\n      ) {\n        cell.style.animation = 'appear-animation 0.3s ease';\n\n        setTimeout(() => {\n          cell.style.animation = '';\n        }, 300);\n      }\n    });\n\n    scoreElement.textContent = game.getScore();\n    messageStart.classList.toggle('hidden', game.getStatus() !== 'idle');\n    messageWin.classList.toggle('hidden', game.getStatus() !== 'won');\n    messageLose.classList.toggle('hidden', game.getStatus() !== 'lost');\n    startButton.classList.toggle('start', game.getStatus() === 'idle');\n    startButton.classList.toggle('restart', game.getStatus() !== 'idle');\n    startButton.textContent = game.getStatus() === 'idle' ? 'Start' : 'Restart';\n  }\n\n  startButton.addEventListener('click', () => {\n    if (game.getStatus() === 'idle') {\n      game.start();\n    } else {\n      game.restart();\n    }\n    updateUI();\n  });\n\n  document.addEventListener('keydown', (e) => {\n    if (game.getStatus() !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n    let mergedTiles = [];\n    let newTile = null;\n\n    switch (e.key) {\n      case 'ArrowLeft':\n        [moved, mergedTiles, newTile] = game.moveLeft();\n        break;\n      case 'ArrowRight':\n        [moved, mergedTiles, newTile] = game.moveRight();\n        break;\n      case 'ArrowUp':\n        [moved, mergedTiles, newTile] = game.moveUp();\n        break;\n      case 'ArrowDown':\n        [moved, mergedTiles, newTile] = game.moveDown();\n        break;\n    }\n\n    if (moved) {\n      updateUI(mergedTiles, newTile);\n    }\n  });\n\n  updateUI();\n});\n","import { _ as _array_with_holes } from \"./_array_with_holes.js\";\nimport { _ as _iterable_to_array_limit } from \"./_iterable_to_array_limit.js\";\nimport { _ as _non_iterable_rest } from \"./_non_iterable_rest.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nexport { _sliced_to_array as _ };\n","function _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nexport { _array_with_holes as _ };\n","function _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n    if (_i == null) return;\n\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n\n    try {\n        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally {\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally {\n            if (_d) throw _e;\n        }\n    }\n\n    return _arr;\n}\nexport { _iterable_to_array_limit as _ };\n","function _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_rest as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","export class Game {\n  constructor(initialState = null) {\n    this.size = 4;\n    this.board = initialState || this.createEmptyBoard();\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  createEmptyBoard() {\n    return Array(this.size)\n      .fill()\n      .map(() => Array(this.size).fill(0));\n  }\n\n  getState() {\n    return this.board.map((row) => [...row]);\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        if (this.board[i][j] === 0) {\n          emptyCells.push([i, j]);\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const [i, j] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[i][j] = Math.random() < 0.9 ? 2 : 4;\n\n      return [i, j];\n    }\n\n    return null;\n  }\n\n  start() {\n    if (this.status === 'idle') {\n      this.addRandomTile();\n      this.addRandomTile();\n      this.status = 'playing';\n    }\n  }\n\n  restart() {\n    this.board = this.createEmptyBoard();\n    this.score = 0;\n    this.status = 'idle';\n    this.start();\n  }\n\n  merge(row) {\n    const newRow = row.filter((val) => val !== 0);\n    const mergedPositions = [];\n\n    for (let i = 0; i < newRow.length - 1; i++) {\n      if (newRow[i] === newRow[i + 1]) {\n        newRow[i] *= 2;\n        this.score += newRow[i];\n        mergedPositions.push(i);\n        newRow.splice(i + 1, 1);\n        i++;\n      }\n    }\n\n    return [\n      [...newRow, ...Array(this.size - newRow.length).fill(0)],\n      mergedPositions,\n    ];\n  }\n\n  moveLeft() {\n    let moved = false;\n    const mergedTiles = [];\n\n    for (let i = 0; i < this.size; i++) {\n      const [newRow, mergedPositions] = this.merge(this.board[i]);\n\n      if (!newRow.every((val, idx) => val === this.board[i][idx])) {\n        moved = true;\n        mergedPositions.forEach((pos) => mergedTiles.push([i, pos]));\n      }\n      this.board[i] = newRow;\n    }\n\n    return this.finishMove(moved, mergedTiles);\n  }\n\n  moveRight() {\n    let moved = false;\n    const mergedTiles = [];\n\n    for (let i = 0; i < this.size; i++) {\n      const reversed = this.board[i].slice().reverse();\n      const [newRow, mergedPositions] = this.merge(reversed);\n      const finalRow = newRow.reverse();\n\n      if (!finalRow.every((val, idx) => val === this.board[i][idx])) {\n        moved = true;\n\n        mergedPositions.forEach((pos) => {\n          mergedTiles.push([i, this.size - 1 - pos]);\n        });\n      }\n      this.board[i] = finalRow;\n    }\n\n    return this.finishMove(moved, mergedTiles);\n  }\n\n  moveUp() {\n    let moved = false;\n    const mergedTiles = [];\n\n    for (let j = 0; j < this.size; j++) {\n      const column = this.board.map((row) => row[j]);\n      const [newColumn, mergedPositions] = this.merge(column);\n\n      if (!newColumn.every((val, idx) => val === column[idx])) {\n        moved = true;\n        mergedPositions.forEach((pos) => mergedTiles.push([pos, j]));\n      }\n\n      for (let i = 0; i < this.size; i++) {\n        this.board[i][j] = newColumn[i];\n      }\n    }\n\n    return this.finishMove(moved, mergedTiles);\n  }\n\n  moveDown() {\n    let moved = false;\n    const mergedTiles = [];\n\n    for (let j = 0; j < this.size; j++) {\n      const column = this.board.map((row) => row[j]).reverse();\n      const [newColumn, mergedPositions] = this.merge(column);\n      const finalColumn = newColumn.reverse();\n\n      if (!finalColumn.every((val, idx) => val === column[idx])) {\n        moved = true;\n\n        mergedPositions.forEach((pos) => {\n          mergedTiles.push([this.size - 1 - pos, j]);\n        });\n      }\n\n      for (let i = 0; i < this.size; i++) {\n        this.board[i][j] = finalColumn[i];\n      }\n    }\n\n    return this.finishMove(moved, mergedTiles);\n  }\n\n  finishMove(moved, mergedTiles) {\n    let newTile = null;\n\n    if (moved) {\n      newTile = this.addRandomTile();\n\n      if (this.board.some((row) => row.includes(2048))) {\n        this.status = 'won';\n      } else if (!this.canMove()) {\n        this.status = 'lost';\n      }\n\n      return [true, mergedTiles, newTile];\n    }\n\n    return [false, [], null];\n  }\n\n  canMove() {\n    for (let i = 0; i < this.size; i++) {\n      for (let j = 0; j < this.size; j++) {\n        if (this.board[i][j] === 0) {\n          return true;\n        }\n\n        if (j < this.size - 1 && this.board[i][j] === this.board[i][j + 1]) {\n          return true;\n        }\n\n        if (i < this.size - 1 && this.board[i][j] === this.board[i + 1][j]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _ as _array_without_holes } from \"./_array_without_holes.js\";\nimport { _ as _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _ as _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n"],"names":["$c3b10a83b523f372$export$71511d61b312f219","arr","len","length","i","arr2","Array","$d4f69c5c6c4654b1$export$71511d61b312f219","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","from","test","$efec029548ccee7f$export$71511d61b312f219","isArray","_s","_e","_i","Symbol","iterator","_arr","_n","_d","next","done","push","value","err","TypeError","$227c6742e0ff6f82$export$71511d61b312f219","iter","$3d28d7f1aac198f5$export$985739bfa5723e08","protoProps","Game","initialState","arguments","instance","Constructor","size","board","createEmptyBoard","score","status","key","_this","fill","map","row","emptyCells","j","_emptyCells_Math_floor","Math","floor","random","i1","j1","addRandomTile","start","newRow","filter","val","mergedPositions","splice","concat","_loop","_this_merge","merge","every","idx","_this1","moved","forEach","pos","mergedTiles","finishMove","reversed","reverse","finalRow","column","newColumn","finalColumn","newTile","some","includes","canMove","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","document","addEventListener","updateUI","movedTiles","state","game","getState","cells","cell","index","col","prevValue","textContent","parseInt","className","param","_param","r","c","style","animation","setTimeout","scoreElement","getScore","messageStart","classList","toggle","getStatus","messageWin","messageLose","startButton","querySelectorAll","querySelector","restart","e","ref","ref1","ref2","ref3","moveLeft","moveRight","moveUp","moveDown"],"version":3,"file":"index.513990a0.js.map"}